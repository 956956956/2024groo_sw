module BCDtoDecimalBeh(DECOut, BCDIn, CLK, nRST);

input [3:0] BCDIn;
input CLK, nRST;
output reg [9:0] DECOut;

reg size;

always @(posedge CLK or negedge nRST)
begin
    if(!nRST)
    begin
        DECOut = 10'b00_0000_0000;
    end
    else
    begin
        case(BCDIn)
            0 : DECOut = 10'b00_0000_0001;
            1 : DECOut = 10'b00_0000_0010;
            2 : DECOut = 10'b00_0000_0100;
            3 : DECOut = 10'b00_0000_1000;
            4 : DECOut = 10'b00_0001_0000;
            5 : DECOut = 10'b00_0010_0000;
            6 : DECOut = 10'b00_0100_0000;
            7 : DECOut = 10'b00_1000_0000;
            8 : DECOut = 10'b01_0000_0000;
            9 : DECOut = 10'b10_0000_0000;
            default : DECOut = 10'b00_0000_0000;
    endcase
    end
end

endmodule

module Top;

wire [9:0] Out;
reg [3:0] In;
reg CLK, nRST;
   
BCDtoDecimalBeh m1(.DECOut(Out), .BCDIn(In), .CLK(CLK), .nRST(nRST));

initial
begin
    CLK = 0;
    forever #5 CLK = ~CLK;
end

initial
begin
    $monitor($time, " BCDIn =  %d --> DECOut = %b\n", In, Out);
    In = 0; nRST = 0;
    #10 In = 1; nRST = 1;
    #10 In = 2;
    #10 In = 3;
    #10 In = 4;
    #10 In = 5;
    #10 In = 6;
    #10 In = 7;
    #10 In = 8;
    #10 In = 9;
    #10 In = 10;
    #10 In = 11;
    #10 In = 12;
    #10 In = 13;
    #10 In = 14;
    #10 In = 15;
    #10 In = 0;
    #10 $finish;
end

endmodule