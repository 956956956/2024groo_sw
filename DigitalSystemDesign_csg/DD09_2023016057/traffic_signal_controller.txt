`timescale 1ns / 1ps

`define TRUE 1'b1
`define FALSE 1'b0

module traffic_signal_controller(hwy, cntry, X, clock, clear, y2rdelay, r2gdelay);
    input X, clock, clear;
    input [2:0] y2rdelay, r2gdelay;
    output reg [1:0] hwy, cntry;
    
    reg [2:0] y2rcounter = 0, r2gcounter = 0;
    
    parameter RED = 2'd0,
               YELLOW = 2'd1,
               GREEN = 2'd2;
    
    parameter s0 = 3'd0,
               s1 = 3'd1,
               s2 = 3'd2,
               s3 = 3'd3,
               s4 = 3'd4;
     
     reg [2:0] state;
     reg [2:0] next_state;
     
     always @(posedge clock or posedge clear)
        if(clear)
            state <= 0;
        else
        begin
            if(state == s1 || state == s4)
            begin
                if(y2rdelay > y2rcounter)
                    y2rcounter = y2rcounter + 1;
                else if(y2rdelay == y2rcounter)
                begin
                    state <= next_state;
                    y2rcounter = 0;
                end
            end
            else if(state == s2)
            begin
                if(r2gdelay > r2gcounter)
                    r2gcounter = r2gcounter + 1;
                else if(r2gdelay == r2gcounter)
                begin
                    state <= next_state;
                    r2gcounter = 0;
                end
            end
            else
                state <= next_state;
        end
            
     always @(state)
     begin
        hwy = GREEN;
        cntry = RED;
        case(state)
            s0: ;
            s1: hwy = YELLOW;
            s2: hwy = RED;
            s3: begin
                hwy = RED;
                cntry = GREEN;
                end
            s4: begin
                hwy = RED;
                cntry = YELLOW;
                end
        endcase
    end
    
    always @(state or X)
    begin
        case(state)
            s0: if(X)
                    next_state = s1;
                else
                    next_state = s0;
            s1: next_state = s2;
            s2: next_state = s3;
            s3: if(X)
                    next_state = s3;
                else
                    next_state = s4;
            s4: next_state = s0;
            default: next_state = s0;
        endcase
    end
endmodule
